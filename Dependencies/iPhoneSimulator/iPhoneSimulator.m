/**
 * A simple DVTiPhoneSimulatorRemoteClient framework for launching app on iOS Simulator
 *
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 *
 * Copyright (c) 2012 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file. 
 * (link : http://src.chromium.org/chrome/trunk/src/testing/iossim/)
 *
 * Original Author: Landon Fuller <landonf@plausiblelabs.com>
 * Copyright (c) 2008-2011 Plausible Labs Cooperative, Inc.
 * All rights reserved.
 *
 *
 * Headers for the DVTiPhoneSimulatorRemoteClient framework used in this tool are
 * generated by class-dump, via GYP.
 * (class-dump is available at http://www.codethecode.com/projects/class-dump/)
 *
 * See the LICENSE file for the license on the source code in this file.
 */


#import "iPhoneSimulator.h"
#import "NSString+expandPath.h"
#import <CoreSimulator/CDStructures.h>
#import <CoreSimulator/SimRuntime.h>
#import <CoreSimulator/SimRuntime+Removed.h>
#import <CoreSimulator/SimDeviceType.h>
#import <CoreSimulator/SimDeviceSet.h>
#import <CoreSimulator/SimDeviceSet+Removed.h>
#import <CoreSimulator/SimDevice.h>
#import <CoreSimulator/SimServiceContext.h>
#import "DVTiPhoneSimulatorRemoteClient.h"

@class DTiPhoneSimulatorSystemRoot;

NSString *simulatorAppId = @"com.apple.iphonesimulator";
NSString *deviceProperty = @"SimulateDevice";
NSString *deviceIphoneRetina3_5InchiOS7 = @"iPhone Retina (3.5-inch)";
NSString *deviceIphoneRetina4_0InchiOS7 = @"iPhone Retina (4-inch)";
NSString *deviceiPhoneRetine4_0InchiOS764bit = @"iPhone Retina (4-inch 64-bit)";
NSString *deviceiPadRetinaiOS764bit = @"iPad Retina (64-bit)";
NSString *deviceIpadRetinaiOS7 = @"iPad Retina";
NSString *deviceIphone = @"iPhone";
NSString *deviceIpad = @"iPad";


// The path within the developer dir of the private Simulator frameworks.
NSString * const kSimulatorFrameworkRelativePath = @"Platforms/iPhoneSimulator.platform/Developer/Library/PrivateFrameworks/DVTiPhoneSimulatorRemoteClient.framework";
NSString * const kDVTFoundationRelativePath = @"../SharedFrameworks/DVTFoundation.framework";
NSString * const kDevToolsFoundationRelativePath = @"../OtherFrameworks/DevToolsFoundation.framework";
NSString * const kSimulatorRelativePath = @"Platforms/iPhoneSimulator.platform/Developer/Applications/iPhone Simulator.app";


// Xcode 6 section block

NSString * const kXcode6SimulatorRelativePath = @"../SharedFrameworks/DVTiPhoneSimulatorRemoteClient.framework";
NSString * const kXcode6CoreSimulatorRelativePath = @"Library/PrivateFrameworks/CoreSimulator.framework";

// End of Xcode 6 block.

@interface DVTPlatform : NSObject
+ (BOOL)loadAllPlatformsReturningError:(id*)arg1;
@end

@implementation iPhoneSimulator

// Helper to find a class by name and die if it isn't found.
-(Class) FindClassByName:(NSString*) nameOfClass {
    Class theClass = NSClassFromString(nameOfClass);
    if (!theClass) {
        NSLog(@"Failed to find class %@ at runtime.", nameOfClass);
        exit(EXIT_FAILURE);
    }
    return theClass;
}

// Loads the Simulator framework from the given developer dir.
-(void) LoadSimulatorFramework:(NSString*) developerDir {
    // The Simulator framework depends on some of the other Xcode private
    // frameworks; manually load them first so everything can be linked up.
    NSString* dvtFoundationPath = [developerDir stringByAppendingPathComponent:kDVTFoundationRelativePath];

    NSBundle* dvtFoundationBundle =
    [NSBundle bundleWithPath:dvtFoundationPath];
    if (![dvtFoundationBundle load]){
        NSLog(@"Unable to dvtFoundationBundle. Error: ");
        exit(EXIT_FAILURE);
        return ;
    }
    NSString* devToolsFoundationPath = [developerDir stringByAppendingPathComponent:kDevToolsFoundationRelativePath];
    NSBundle* devToolsFoundationBundle =
    [NSBundle bundleWithPath:devToolsFoundationPath];
    if (![devToolsFoundationBundle load]){
        NSLog(@"Unable to devToolsFoundationPath. Error: ");
        return ;
    }
    // Prime DVTPlatform.
    NSError* error;
    Class DVTPlatformClass = [self FindClassByName:@"DVTPlatform"];
    if (![DVTPlatformClass loadAllPlatformsReturningError:&error]) {
        NSLog(@"Unable to loadAllPlatformsReturningError. Error: %@",[error localizedDescription]);
        return ;
    }
    //Xcode 5 and below.
    NSString* simBundlePath = [developerDir stringByAppendingPathComponent:kSimulatorFrameworkRelativePath];
    if (![[NSFileManager defaultManager] fileExistsAtPath:simBundlePath]) {
        simBundlePath = [developerDir stringByAppendingPathComponent:kXcode6SimulatorRelativePath];
        isXcode6 = YES;
        NSString * coreSimBundlePath = [developerDir stringByAppendingPathComponent:kXcode6CoreSimulatorRelativePath];
        NSBundle* coreBundle = [NSBundle bundleWithPath:coreSimBundlePath];
        if (![coreBundle load]) {
            NSLog(@"Unable to load core simulator framework");
            exit(EXIT_FAILURE);
        }
    }
    NSBundle* simBundle = [NSBundle bundleWithPath:simBundlePath];
    if (![simBundle load]) {
        NSLog(@"Unable to load simulator framework");
        exit(EXIT_FAILURE);
    }
}

// Finds the developer dir via xcode-select or the DEVELOPER_DIR environment
// variable.
NSString* FindDeveloperDir() {
    // Check the env first.
    NSDictionary* env = [[NSProcessInfo processInfo] environment];
    NSString* developerDir = [env objectForKey:@"DEVELOPER_DIR"];
    if ([developerDir length] > 0)
        return developerDir;
    
    // Go look for it via xcode-select.
    NSTask* xcodeSelectTask = [[NSTask alloc] init];
    [xcodeSelectTask setLaunchPath:@"/usr/bin/xcode-select"];
    [xcodeSelectTask setArguments:[NSArray arrayWithObject:@"-print-path"]];
    
    NSPipe* outputPipe = [NSPipe pipe];
    [xcodeSelectTask setStandardOutput:outputPipe];
    NSFileHandle* outputFile = [outputPipe fileHandleForReading];
    
    [xcodeSelectTask launch];
    NSData* outputData = [outputFile readDataToEndOfFile];
    [xcodeSelectTask terminate];
    
    NSString* output =
    [[NSString alloc] initWithData:outputData
                           encoding:NSUTF8StringEncoding];
    output = [output stringByTrimmingCharactersInSet:
              [NSCharacterSet whitespaceAndNewlineCharacterSet]];
    if ([output length] == 0)
        output = nil;
    return output;
}


- (void) printUsage {
  fprintf(stderr, "Usage: ios-sim <command> <options> [--args ...]\n");
  fprintf(stderr, "\n");
  fprintf(stderr, "Commands:\n");
  fprintf(stderr, "  showsdks                        List the available iOS SDK versions\n");
  fprintf(stderr, "  launch <application path>       Launch the application at the specified path on the iOS Simulator\n");
  fprintf(stderr, "  showallsimulators               List all simulators available. (Xcode 6+)");
  fprintf(stderr, "\n");

  fprintf(stderr, "Options:\n");
  fprintf(stderr, "xcode-dir <custom DEVELOPER_DIR>           Set the xcode to be used by ios-sim. (Should be passed in as the First argument. Defaults to `xcode-select --print-path` location\n");

  fprintf(stderr, "  --version                       Print the version of ios-sim\n");
  fprintf(stderr, "  --help                          Show this help text\n");
  fprintf(stderr, "  --verbose                       Set the output level to verbose\n");
  fprintf(stderr, "  --exit                          Exit after startup\n");
  fprintf(stderr, "  --retina                        Start as a retina device(DEPRECATED)\n");
  fprintf(stderr, "  --tall                          Start the tall version of the iPhone simulator(4-inch simulator), to be used in conjuction with retina flag(DEPRECATED)\n");
  fprintf(stderr, "  --sim-64bit                     Start 64 bit version of iOS 7 simulator(DEPRECATED))\n");
  fprintf(stderr, "  --timeout                       Set the timeout value for a new session from the Simulator. Default: 30 seconds \n");
  fprintf(stderr, "  --sdk <sdkversion>              The iOS SDK version to run the application on (defaults to the latest)\n");
  fprintf(stderr, "  --udid <unique device ID>       The UDID of the simulator being launched. Run `ios-sim listSimulators` to get the list of simulators.\n");
  fprintf(stderr, "  --family <device family>        The device type that should be simulated (defaults to `iphone')\n");
  fprintf(stderr, "  --uuid <uuid>                   A UUID identifying the session (is that correct?)\n");
  fprintf(stderr, "  --env <environment file path>   A plist file containing environment key-value pairs that should be set\n");
  fprintf(stderr, "  --setenv NAME=VALUE             Set an environment variable\n");
  fprintf(stderr, "  --stdout <stdout file path>     The path where stdout of the simulator will be redirected to (defaults to stdout of ios-sim)\n");
  fprintf(stderr, "  --stderr <stderr file path>     The path where stderr of the simulator will be redirected to (defaults to stderr of ios-sim)\n");
  fprintf(stderr, "  --args <...>                    All following arguments will be passed on to the application\n");
}

- (NSString*) findDeviceType:(NSString *)family {
    NSString *devicePropertyValue;
    
    if (retinaDevice) {
        if (verbose) {
            NSLog(@"using retina");
        }
        if ([family isEqualToString:@"ipad"]) {
            if (sim_64bit) {
                if (verbose) { NSLog(@"using retina ipad ios 7 64-bit"); }
                devicePropertyValue = deviceiPadRetinaiOS764bit;
            } else {
                if (verbose) { NSLog(@"using retina ipad ios 7"); }
                devicePropertyValue = deviceIpadRetinaiOS7;
            }
            
        }
        else {
            if (tallDevice) {
                if (sim_64bit) {
                    if (verbose) { NSLog(@"using iphone retina tall ios 7 64 bit"); }
                    devicePropertyValue = deviceiPhoneRetine4_0InchiOS764bit;
                } else {
                    if (verbose) { NSLog(@"using iphone retina tall ios 7"); }
                    devicePropertyValue = deviceIphoneRetina4_0InchiOS7;
                }
            } else {
                if (verbose) { NSLog(@"using retina iphone retina ios 7"); }
                devicePropertyValue = deviceIphoneRetina3_5InchiOS7;
            }
        }
    } else {
        if ([family isEqualToString:@"ipad"]) {
            devicePropertyValue = deviceIpad;
        } else {
            devicePropertyValue = deviceIphone;
        }
    }
    if (verbose) {
        NSLog(@"Simulated Device Name :: %@",devicePropertyValue);
    }
    return devicePropertyValue;

}

- (SimDeviceSet *)defaultDeviceSet
{
	NSError *error = nil;
	NSString *developerDir = FindDeveloperDir();
	NSLog(@"Developer directory located at: \"%@\"",developerDir);
	
	Class simServiceContextClass = [self FindClassByName:@"SimServiceContext"];
	id context = [simServiceContextClass sharedServiceContextForDeveloperDir:developerDir error:&error];
	if ( !error ) {
		NSLog(@"%@ - Error getting shared service context for developer directory \"%@\" (%@)",NSStringFromSelector(_cmd), developerDir, error);
	}
	error = nil;
	SimDeviceSet * simDeviceSet = [context defaultDeviceSetWithError:&error];
	if ( !simDeviceSet ) {
		NSLog(@"Error creating SimDeviceSet with deviceSetWithPath:error:");
	}
	return simDeviceSet;
}

-(SimDevice *)FindDeviceToBeSimulated:(NSString *)udid {
	NSLog(@"%@",NSStringFromSelector(_cmd));

	NSArray *devices = [self simulators];

    for (id device in devices) {
        if (verbose) {
            NSLog(@"Comparing %@ == %@",[device UDID].UUIDString , udid );
        }
        if ([[device UDID].UUIDString isEqualToString:udid]) {
        return device;
        }
    }
    return nil;
}

- (int) showSDKs {
    Class systemRootClass = [self FindClassByName:@"DTiPhoneSimulatorSystemRoot"];
    if (isXcode6) {
        
        Class simRunTimeClass = [self FindClassByName:@"SimRuntime"];
        id supportedRuntimes = [simRunTimeClass supportedRuntimes];
        printf("Available iOS SDK's\n");
        for (id runtime in supportedRuntimes) {
            NSLog(@" %@",[runtime name]);
        }
    } else {
        NSArray *roots = [systemRootClass knownRoots];
        NSLog(@"Simulator SDK Roots:");
        for (DTiPhoneSimulatorSystemRoot *root in roots) {
            NSLog(@"'%@' (%@)\n\t%@", [root sdkDisplayName], [root sdkVersion], [root sdkRootPath]);
        }
    }
    return EXIT_SUCCESS;
}

- (void)configure {
    NSString* developerDir = FindDeveloperDir();
    if (!developerDir) {
        NSLog(@"Unable to find developer directory.");
        exit(EXIT_FAILURE);
    }
    
    [self LoadSimulatorFramework:developerDir];
}

- (NSArray *)simulators {
    NSArray *devices = [[self defaultDeviceSet] availableDevices];

    return devices;
}

- (SimDevice *)simDeviceNamed:(NSString *)name {
    NSArray *devices = [self simulators];
    for (SimDevice *device in devices) {
        if ([device.name isEqualToString:name]) {
            return device;
        }
    }
    return nil;
}

- (void)session:(DTiPhoneSimulatorSession *)session didEndWithError:(NSError *)error {
  if (verbose) {
    NSLog(@"Session did end with error %@", error);
  }
/*
  if (stderrFileHandle != nil) {
    NSString *stderrPath = [[session sessionConfig] simulatedApplicationStdErrPath];
    [self removeStdioFIFO:stderrFileHandle atPath:stderrPath];
  }

  if (stdoutFileHandle != nil) {
    NSString *stdoutPath = [[session sessionConfig] simulatedApplicationStdOutPath];
    [self removeStdioFIFO:stdoutFileHandle atPath:stdoutPath];
  }
    */

  if (error != nil) {
    exit(EXIT_FAILURE);
  }

  exit(EXIT_SUCCESS);
}


- (void)session:(DTiPhoneSimulatorSession *)session didStart:(BOOL)started withError:(NSError *)error {
  if (startOnly && session) {
    NSLog(@"Simulator started (no session)");
    exit(EXIT_SUCCESS);
  }

  if (started) {
    if (verbose) {
      NSLog(@"Session started");
    }
    if (exitOnStartup) {
      exit(EXIT_SUCCESS);
    }
  } else {
    NSLog(@"Session could not be started: %@", error);
    exit(EXIT_FAILURE);
  }
}

/*
- (void)stdioDataIsAvailable:(NSNotification *)notification {
  NSData *data = [[notification userInfo] valueForKey:NSFileHandleNotificationDataItem];
  NSString *str = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
  if (!alreadyPrintedData) {
    if ([str length] == 0) {
      return;
    } else {
      alreadyPrintedData = YES;
    }
  }
  if ([str length] > 0) {
    fprintf(stdout, "%s", [str UTF8String]);
    fflush(stdout);
  }
}


- (void)createStdioFIFO:(NSFileHandle **)fileHandle ofType:(NSString *)type atPath:(NSString **)path {
  *path = [NSString stringWithFormat:@"%@/ios-sim-%@-pipe-%d", NSTemporaryDirectory(), type, (int)time(NULL)];
  if (mkfifo([*path UTF8String], S_IRUSR | S_IWUSR) == -1) {
    nsprintf(@"Unable to create %@ named pipe `%@'", type, *path);
    exit(EXIT_FAILURE);
  } else {
    if (verbose) {
      nsprintf(@"Creating named pipe at `%@'", *path);
    }
    int fd = open([*path UTF8String], O_RDONLY | O_NDELAY);
    *fileHandle = [[[NSFileHandle alloc] initWithFileDescriptor:fd] retain];
    [*fileHandle readInBackgroundAndNotify];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(stdioDataIsAvailable:)
                                                 name:NSFileHandleReadCompletionNotification
                                               object:*fileHandle];
  }
}


- (void)removeStdioFIFO:(NSFileHandle *)fileHandle atPath:(NSString *)path {
  if (verbose) {
    nsprintf(@"Removing named pipe at `%@'", path);
  }
  [fileHandle closeFile];
  [fileHandle release];
  if (![[NSFileManager defaultManager] removeItemAtPath:path error:NULL]) {
    nsprintf(@"Unable to remove named pipe `%@'", path);
  }
}

*/

- (int)launchApp:(NSString *)path withFamily:(NSString *)family
                                 withTimeout:(NSTimeInterval)timeout
                                        udid:(NSString*)udid
                                        uuid:(NSString *)uuid
                                 environment:(NSDictionary *)environment
                                        args:(NSArray *)args{
  DTiPhoneSimulatorApplicationSpecifier *appSpec;
  DTiPhoneSimulatorSessionConfig *config;
  DTiPhoneSimulatorSession *session;
  NSError *error;
  NSFileManager *fileManager = [[NSFileManager alloc] init];
  if (!startOnly && ![fileManager fileExistsAtPath:path]) {
    NSLog(@"Could not load application specification for %@", path);
    exit(EXIT_FAILURE);
  }

  /* Create the app specifier */
    appSpec = startOnly ? nil : [[self FindClassByName:@"DTiPhoneSimulatorApplicationSpecifier"] specifierWithApplicationPath:path];
  if (verbose) {
    NSLog(@"App Spec: %@", appSpec);
    NSLog(@"SDK Root: %@", sdkRoot);

    for (id key in environment) {
      NSLog(@"Env: %@ = %@", key, [environment objectForKey:key]);
    }
  }

  /* Set up the session configuration */
  config = [[[self FindClassByName:@"DTiPhoneSimulatorSessionConfig"] alloc] init];
  [config setApplicationToSimulateOnStart:appSpec];
  [config setSimulatedSystemRoot:sdkRoot];
  [config setSimulatedApplicationShouldWaitForDebugger: NO];

  [config setSimulatedApplicationLaunchArgs:args];
  [config setSimulatedApplicationLaunchEnvironment:environment];

    /*
  if (stderrPath) {
    stderrFileHandle = nil;
  } else if (!exitOnStartup) {
    [self createStdioFIFO:&stderrFileHandle ofType:@"stderr" atPath:&stderrPath];
  }
  [config setSimulatedApplicationStdErrPath:stderrPath];

  if (stdoutPath) {
    stdoutFileHandle = nil;
  } else if (!exitOnStartup) {
    [self createStdioFIFO:&stdoutFileHandle ofType:@"stdout" atPath:&stdoutPath];
  }
  [config setSimulatedApplicationStdOutPath:stdoutPath];
*/
  [config setLocalizedClientName: @"ios-sim"];

  // this was introduced in 3.2 of SDK
  if ([config respondsToSelector:@selector(setSimulatedDeviceFamily:)]) {
    if (family == nil) {
      family = @"iphone";
    }

    if (verbose) {
      NSLog(@"using device family %@",family);
    }

    if ([family isEqualToString:@"ipad"]) {
      [config setSimulatedDeviceFamily:[NSNumber numberWithInt:2]];
    } else{
      [config setSimulatedDeviceFamily:[NSNumber numberWithInt:1]];
    }
  }
  
    //Xcode 6
    if (isXcode6) {
            if (((NSNull *) udid == [NSNull null]) ||
                ([udid length] == 0)||
                (udid == nil) ||
                ([[udid stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] length] == 0))  {
                NSLog(@"To launch simulator on Xcode 6 please provide a valid simulator UDID. Run `ios-sim showAllSimulators` to get a list of all Simulators.");
                return EXIT_FAILURE;
            }
        SimDevice *device = [self FindDeviceToBeSimulated:udid];
        if (device == nil) {
            NSLog(@"Unable to locate the Simulator with the provided udid : %@", udid);
            exit(EXIT_FAILURE);
        }
        
        config.device = device;
        NSLog(@"set device to : %@",device.name);
    } else {
        /* Figure out the type of simulator we need to open up.*/
        NSString *deviceInfoName = [self findDeviceType:family];
        [config setSimulatedDeviceInfoName:deviceInfoName];
       
    }
    
  /* Start the session */
  session = [[[self FindClassByName:@"DTiPhoneSimulatorSession"] alloc] init];
  [session setDelegate:self];
  if (uuid != nil){
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
      [session performSelector:NSSelectorFromString(@"setUuid:") withObject:uuid];
      #pragma clang diagnostic pop
  }
  timeout = MIN(500, MAX(90, timeout));
    
  if (![session requestStartWithConfig:config timeout:timeout error:&error]) {
    NSLog(@"Could not start simulator session:");
    exit(EXIT_FAILURE);
  }

  return EXIT_SUCCESS;
}

@end
